"""
–ö–ê–†–î–ò–ù–ê–õ–¨–ù–û –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ bot_worker.
–ù–û–í–ê–Ø –í–ï–†–°–ò–Ø —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π LDConsoleManager, ResourceMonitor –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.

–ù–û–í–´–ô WORKFLOW:
1. Planning Phase - –∞–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞—Ç—á–∞
2. Startup Phase - –∑–∞–ø—É—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ LDConsoleManager
3. Readiness Phase - –æ–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ADB
4. Processing Phase - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ bot_worker
5. Shutdown Phase - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤

–ö–õ–Æ–ß–ï–í–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:
- –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å LDConsoleManager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ResourceMonitor –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞–º–∏
- –£–º–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞—Ç—á–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–µ–π
- –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- –£–ª—É—á—à–µ–Ω–Ω—ã–µ CLI –∫–æ–º–∞–Ω–¥—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
"""
import sys
import os
import time
import signal
import subprocess
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor, as_completed
from pathlib import Path
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
import click
import psutil
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(str(Path(__file__).parent))

from utils.emulator_discovery import EmulatorDiscovery
from utils.ldconsole_manager import LDConsoleManager
from utils.resource_monitor import ResourceMonitor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add("logs/orchestrator_v2_{time}.log", rotation="100 MB", level="INFO")


@dataclass
class BatchPlan:
    """–ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞—Ç—á–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤"""
    emulators: List[Dict]
    batch_size: int
    recommended_profile: str
    estimated_duration: int  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    resource_allocation: Dict
    warnings: List[str]
    can_execute: bool


@dataclass
class BatchResults:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞—Ç—á–∞"""
    plan: BatchPlan
    startup_results: Dict
    readiness_results: Dict
    processing_results: Dict
    shutdown_results: Dict
    total_duration: float
    success_rate: float
    emulators_processed: int
    errors: List[str]


class SmartOrchestrator:
    """
    –£–º–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SmartOrchestrator"""
        logger.info("=== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SmartOrchestrator ===")

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.discovery = EmulatorDiscovery()
        self.ldconsole_manager = None
        self.resource_monitor = None

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.session_stats = {
            'batches_executed': 0,
            'emulators_processed': 0,
            'total_errors': 0,
            'start_time': datetime.now(),
            'last_batch_time': None
        }

        # –§–ª–∞–≥–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.shutdown_requested = False
        self.emergency_shutdown = False

        logger.info("SmartOrchestrator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self._initialize_components()

    def _initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã...")

            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LDConsoleManager
            try:
                self.ldconsole_manager = LDConsoleManager()
                health_check = self.ldconsole_manager.health_check()

                if health_check['healthy']:
                    logger.info("‚úÖ LDConsoleManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                else:
                    logger.error(f"‚ùå LDConsoleManager –Ω–µ –≥–æ—Ç–æ–≤: {health_check['issues']}")
                    raise Exception("LDConsoleManager –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LDConsoleManager: {e}")
                raise

            # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ResourceMonitor
            try:
                self.resource_monitor = ResourceMonitor()
                logger.info("‚úÖ ResourceMonitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ResourceMonitor: {e}")
                raise

            # 3. –ê–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
            try:
                discovery_result = self.discovery.discover_and_save()
                if discovery_result['success']:
                    logger.info(f"‚úÖ –ê–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ: –Ω–∞–π–¥–µ–Ω–æ {discovery_result['emulators_found']} —ç–º—É–ª—è—Ç–æ—Ä–æ–≤")
                else:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º: {discovery_result['message']}")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: {e}")
                # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É

            # 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
            self._setup_signal_handlers()

            logger.info("üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            raise

    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""

        def signal_handler(signum, frame):
            signal_name = signal.Signals(signum).name
            logger.warning(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal_name} - –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º graceful shutdown")
            self.shutdown_requested = True

        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)

    # ===== –ù–û–í–´–ô WORKFLOW: 5 –§–ê–ó –û–ë–†–ê–ë–û–¢–ö–ò –ë–ê–¢–ß–ê =====

    def execute_smart_batch(self, profile_filter: Optional[str] = None,
                            max_emulators: Optional[int] = None) -> BatchResults:
        """
        –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–º–Ω–æ–≥–æ –±–∞—Ç—á–∞ —Å 5-—Ñ–∞–∑–Ω—ã–º workflow

        Args:
            profile_filter (str, optional): –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ—Ñ–∏–ª—é —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
            max_emulators (int, optional): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤

        Returns:
            BatchResults: –ü–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞—Ç—á–∞
        """
        logger.info("üöÄ === –ù–ê–ß–ê–õ–û –í–´–ü–û–õ–ù–ï–ù–ò–Ø –£–ú–ù–û–ì–û –ë–ê–¢–ß–ê ===")
        batch_start_time = time.time()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        batch_results = BatchResults(
            plan=None,
            startup_results={},
            readiness_results={},
            processing_results={},
            shutdown_results={},
            total_duration=0.0,
            success_rate=0.0,
            emulators_processed=0,
            errors=[]
        )

        try:
            # === –§–ê–ó–ê 1: –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï ===
            logger.info("\nüéØ === –§–ê–ó–ê 1: –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –ë–ê–¢–ß–ê ===")

            plan = self._phase1_planning(profile_filter, max_emulators)
            batch_results.plan = plan

            if not plan.can_execute:
                logger.error("‚ùå –ë–∞—Ç—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                batch_results.errors.extend(plan.warnings)
                return batch_results

            logger.info(f"‚úÖ –ü–ª–∞–Ω –≥–æ—Ç–æ–≤: {plan.batch_size} —ç–º—É–ª—è—Ç–æ—Ä–æ–≤, –ø—Ä–æ—Ñ–∏–ª—å '{plan.recommended_profile}'")

            # === –§–ê–ó–ê 2: –ó–ê–ü–£–°–ö –≠–ú–£–õ–Ø–¢–û–†–û–í ===
            logger.info(f"\nüöÄ === –§–ê–ó–ê 2: –ó–ê–ü–£–°–ö {plan.batch_size} –≠–ú–£–õ–Ø–¢–û–†–û–í ===")

            startup_results = self._phase2_startup(plan)
            batch_results.startup_results = startup_results

            if startup_results['started_successfully'] == 0:
                logger.error("‚ùå –ù–∏ –æ–¥–Ω–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å - –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
                batch_results.errors.append("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞")
                return batch_results

            logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {startup_results['started_successfully']}/{plan.batch_size}")

            # === –§–ê–ó–ê 3: –û–ñ–ò–î–ê–ù–ò–ï –ì–û–¢–û–í–ù–û–°–¢–ò ===
            logger.info(f"\n‚è≥ === –§–ê–ó–ê 3: –û–ñ–ò–î–ê–ù–ò–ï –ì–û–¢–û–í–ù–û–°–¢–ò ADB ===")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
            started_emulator_indexes = [
                result['index'] for result in startup_results['results']
                if result['success'] and not result.get('already_running', False)
            ]

            readiness_results = self._phase3_readiness(started_emulator_indexes)
            batch_results.readiness_results = readiness_results

            ready_emulators = readiness_results['ready_emulators']
            if ready_emulators == 0:
                logger.error("‚ùå –ù–∏ –æ–¥–Ω–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞ –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                batch_results.errors.append("–≠–º—É–ª—è—Ç–æ—Ä—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å, –Ω–æ ADB –Ω–µ –≥–æ—Ç–æ–≤")
                # –í—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ–±—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ —á—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏
                self._phase5_shutdown([emu['index'] for emu in plan.emulators])
                return batch_results

            logger.info(f"‚úÖ –ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {ready_emulators}")

            # === –§–ê–ó–ê 4: –û–ë–†–ê–ë–û–¢–ö–ê –ê–ö–ö–ê–£–ù–¢–û–í ===
            logger.info(f"\n‚öôÔ∏è === –§–ê–ó–ê 4: –û–ë–†–ê–ë–û–¢–ö–ê –ò–ì–†–û–í–´–• –ê–ö–ö–ê–£–ù–¢–û–í ===")

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
            ready_emulator_data = []
            for result in readiness_results['results']:
                if result['ready']:
                    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–º—É–ª—è—Ç–æ—Ä –≤ –ø–ª–∞–Ω–µ
                    emulator_data = next(
                        (emu for emu in plan.emulators if emu['index'] == result['index']),
                        None
                    )
                    if emulator_data:
                        emulator_data['adb_port'] = result['adb_port']  # –û–±–Ω–æ–≤–ª—è–µ–º ADB –ø–æ—Ä—Ç
                        ready_emulator_data.append(emulator_data)

            processing_results = self._phase4_processing(ready_emulator_data, plan)
            batch_results.processing_results = processing_results

            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {processing_results['processed_successfully']}")

            # === –§–ê–ó–ê 5: –û–°–¢–ê–ù–û–í–ö–ê –≠–ú–£–õ–Ø–¢–û–†–û–í ===
            logger.info(f"\nüõë === –§–ê–ó–ê 5: –û–°–¢–ê–ù–û–í–ö–ê –≠–ú–£–õ–Ø–¢–û–†–û–í ===")

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —ç–º—É–ª—è—Ç–æ—Ä—ã –∏–∑ –ø–ª–∞–Ω–∞ (—Ç–µ —á—Ç–æ –∑–∞–ø—É—Å–∫–∞–ª–∏)
            emulator_indexes_to_stop = [emu['index'] for emu in plan.emulators]
            shutdown_results = self._phase5_shutdown(emulator_indexes_to_stop)
            batch_results.shutdown_results = shutdown_results

            logger.info(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {shutdown_results['stopped_successfully']}")

            # === –ü–û–î–°–ß–ï–¢ –§–ò–ù–ê–õ–¨–ù–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===
            batch_results.total_duration = time.time() - batch_start_time
            batch_results.emulators_processed = processing_results.get('processed_successfully', 0)

            total_attempted = len(plan.emulators)
            if total_attempted > 0:
                batch_results.success_rate = (batch_results.emulators_processed / total_attempted) * 100
            else:
                batch_results.success_rate = 0.0

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
            self._update_session_stats(batch_results)

            logger.info(f"\nüéâ === –ë–ê–¢–ß –ó–ê–í–ï–†–®–ï–ù ===")
            logger.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {batch_results.total_duration:.1f} —Å–µ–∫—É–Ω–¥")
            logger.info(
                f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {batch_results.emulators_processed}/{total_attempted} ({batch_results.success_rate:.1f}%)")

            return batch_results

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞—Ç—á–∞: {e}")
            batch_results.errors.append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            batch_results.total_duration = time.time() - batch_start_time
            return batch_results

        finally:
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –±–∞—Ç—á–∞
            self._log_post_batch_system_state()

    def _phase1_planning(self, profile_filter: Optional[str], max_emulators: Optional[int]) -> BatchPlan:
        """
        –§–ê–ó–ê 1: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞—Ç—á–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –≤—ã–±–æ—Ä–æ–º —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
        """
        logger.info("üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º –±–∞—Ç—á...")

        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å–∏—Å—Ç–µ–º—ã
            system_load = self.resource_monitor.get_system_load()
            logger.info(
                f"üíª –°–∏—Å—Ç–µ–º–∞: CPU {system_load.cpu_percent:.1f}%, RAM {system_load.memory_percent:.1f}%, –ù–∞–≥—Ä—É–∑–∫–∞: {system_load.load_level}")

            # 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
            available_emulators = self.discovery.get_enabled_emulators(
                profile_filter=profile_filter,
                running_only=False  # –í–∫–ª—é—á–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ - –º—ã –∏—Ö —Å–∞–º–∏ –∑–∞–ø—É—Å—Ç–∏–º
            )

            if not available_emulators:
                return BatchPlan(
                    emulators=[],
                    batch_size=0,
                    recommended_profile='farming',
                    estimated_duration=0,
                    resource_allocation={},
                    warnings=["–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"],
                    can_execute=False
                )

            logger.info(f"üì± –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {len(available_emulators)}")

            # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
            if not profile_filter:
                recommended_profile = self._determine_optimal_profile(system_load)
            else:
                recommended_profile = profile_filter

            logger.info(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø—Ä–æ—Ñ–∏–ª—å: {recommended_profile}")

            # 4. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
            optimal_batch_size = self.resource_monitor.get_optimal_batch_size(recommended_profile)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ
            if max_emulators:
                optimal_batch_size = min(optimal_batch_size, max_emulators)

            # –ù–µ –º–æ–∂–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ —á–µ–º –µ—Å—Ç—å —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
            final_batch_size = min(optimal_batch_size, len(available_emulators))

            logger.info(f"üìä –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {final_batch_size} (–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π: {optimal_batch_size})")

            # 5. –í—ã–±–∏—Ä–∞–µ–º —ç–º—É–ª—è—Ç–æ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É)
            selected_emulators = available_emulators[:final_batch_size]

            # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞
            safety_check = self.resource_monitor.is_safe_to_start_batch(
                batch_size=final_batch_size,
                profile=recommended_profile
            )

            warnings = safety_check.warnings.copy()
            can_execute = safety_check.safe_to_start

            if not can_execute:
                warnings.append("–°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É –±–∞—Ç—á–∞")

            # 7. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            estimated_duration = self._estimate_batch_duration(final_batch_size, recommended_profile)

            # 8. –§–æ—Ä–º–∏—Ä—É–µ–º –ø–ª–∞–Ω —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
            resource_allocation = {
                'total_cpu_cores': sum(self._get_cpu_requirement(recommended_profile) for _ in selected_emulators),
                'total_memory_mb': sum(self._get_memory_requirement(recommended_profile) for _ in selected_emulators),
                'profile_distribution': {recommended_profile: len(selected_emulators)}
            }

            plan = BatchPlan(
                emulators=selected_emulators,
                batch_size=final_batch_size,
                recommended_profile=recommended_profile,
                estimated_duration=estimated_duration,
                resource_allocation=resource_allocation,
                warnings=warnings,
                can_execute=can_execute
            )

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–ª–∞–Ω
            logger.info(f"üìã –ü–ª–∞–Ω –±–∞—Ç—á–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:")
            logger.info(f"   üéÆ –≠–º—É–ª—è—Ç–æ—Ä—ã: {[emu['name'][:20] for emu in selected_emulators]}")
            logger.info(f"   ‚ö° –ü—Ä–æ—Ñ–∏–ª—å: {recommended_profile}")
            logger.info(f"   ‚è±Ô∏è –í—Ä–µ–º—è: ~{estimated_duration // 60} –º–∏–Ω—É—Ç")
            logger.info(
                f"   üíæ –†–µ—Å—É—Ä—Å—ã: CPU {resource_allocation['total_cpu_cores']} —è–¥–µ—Ä, RAM {resource_allocation['total_memory_mb']} MB")
            logger.info(f"   ‚úÖ –ì–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é: {'–î–∞' if can_execute else '–ù–µ—Ç'}")

            if warnings:
                for warning in warnings:
                    logger.warning(f"   ‚ö†Ô∏è {warning}")

            return plan

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞—Ç—á–∞: {e}")
            return BatchPlan(
                emulators=[],
                batch_size=0,
                recommended_profile='farming',
                estimated_duration=0,
                resource_allocation={},
                warnings=[f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"],
                can_execute=False
            )

    def _phase2_startup(self, plan: BatchPlan) -> Dict:
        """
        –§–ê–ó–ê 2: –ó–∞–ø—É—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ LDConsoleManager
        """
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º {plan.batch_size} —ç–º—É–ª—è—Ç–æ—Ä–æ–≤...")

        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
            logger.info(f"‚öôÔ∏è –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ '{plan.recommended_profile}'...")

            emulator_indexes = [emu['index'] for emu in plan.emulators]

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫ –±–∞—Ç—á—É (–±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ - —ç–º—É–ª—è—Ç–æ—Ä—ã –µ—â—ë –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã)
            profile_result = self.ldconsole_manager.apply_profile_to_batch(
                emulator_indexes=emulator_indexes,
                profile_name=plan.recommended_profile,
                restart_if_needed=False  # –≠–º—É–ª—è—Ç–æ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–µ –Ω—É–∂–µ–Ω
            )

            if profile_result['applied_successfully'] > 0:
                logger.info(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏–º–µ–Ω—ë–Ω –∫ {profile_result['applied_successfully']} —ç–º—É–ª—è—Ç–æ—Ä–∞–º")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞—Ç—á —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
            startup_result = self.ldconsole_manager.start_batch(
                emulator_indexes=emulator_indexes,
                max_parallel=3,  # –ù–µ –±–æ–ª–µ–µ 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤
                start_delay=5,  # 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
                timeout=90  # 90 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
            )

            return startup_result

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∞–∑—ã –∑–∞–ø—É—Å–∫–∞: {e}")
            return {
                'success': False,
                'started_successfully': 0,
                'already_running': 0,
                'failed': len(plan.emulators),
                'results': [],
                'error': str(e)
            }

    def _phase3_readiness(self, emulator_indexes: List[int]) -> Dict:
        """
        –§–ê–ó–ê 3: –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ADB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        """
        logger.info(f"‚è≥ –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ {len(emulator_indexes)} —ç–º—É–ª—è—Ç–æ—Ä–æ–≤...")

        try:
            if not emulator_indexes:
                return {
                    'success': True,
                    'ready_emulators': 0,
                    'timeout_emulators': 0,
                    'failed_emulators': 0,
                    'results': []
                }

            # –ñ–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞—Ç—á–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
            readiness_result = self.ldconsole_manager.wait_batch_ready(
                emulator_indexes=emulator_indexes,
                timeout=150,  # 2.5 –º–∏–Ω—É—Ç—ã –Ω–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö
                check_interval=5
            )

            return readiness_result

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∞–∑—ã –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {e}")
            return {
                'success': False,
                'ready_emulators': 0,
                'timeout_emulators': len(emulator_indexes),
                'failed_emulators': 0,
                'results': [],
                'error': str(e)
            }

    def _phase4_processing(self, ready_emulators: List[Dict], plan: BatchPlan) -> Dict:
        """
        –§–ê–ó–ê 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ bot_worker
        """
        logger.info(f"‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(ready_emulators)} –≥–æ—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")

        processing_results = {
            'processed_successfully': 0,
            'failed': 0,
            'results': [],
            'total_time': 0
        }

        if not ready_emulators:
            return processing_results

        start_time = time.time()

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ThreadPoolExecutor –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            max_workers = min(3, len(ready_emulators))  # –ù–µ –±–æ–ª–µ–µ 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ

            with ThreadPoolExecutor(max_workers=max_workers) as executor:
                # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞
                future_to_emulator = {}

                for emulator in ready_emulators:
                    future = executor.submit(self._process_single_emulator, emulator, plan)
                    future_to_emulator[future] = emulator

                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for future in as_completed(future_to_emulator, timeout=1800):  # 30 –º–∏–Ω—É—Ç –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç
                    emulator = future_to_emulator[future]

                    try:
                        result = future.result(timeout=30)
                        result['emulator_name'] = emulator['name']
                        result['emulator_index'] = emulator['index']

                        processing_results['results'].append(result)

                        if result['success']:
                            processing_results['processed_successfully'] += 1
                            logger.info(
                                f"‚úÖ –≠–º—É–ª—è—Ç–æ—Ä {emulator['index']} ({emulator['name'][:20]}) –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {result['duration']:.1f}s")
                        else:
                            processing_results['failed'] += 1
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator['index']}: {result['error']}")

                    except Exception as e:
                        processing_results['failed'] += 1
                        processing_results['results'].append({
                            'emulator_name': emulator['name'],
                            'emulator_index': emulator['index'],
                            'success': False,
                            'duration': 0,
                            'error': f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
                        })
                        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator['index']}: {e}")

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ñ–∞–∑—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            processing_results['error'] = str(e)

        finally:
            processing_results['total_time'] = time.time() - start_time

        return processing_results

    def _phase5_shutdown(self, emulator_indexes: List[int]) -> Dict:
        """
        –§–ê–ó–ê 5: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
        """
        logger.info(f"üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {len(emulator_indexes)} —ç–º—É–ª—è—Ç–æ—Ä–æ–≤...")

        try:
            if not emulator_indexes:
                return {
                    'success': True,
                    'stopped_successfully': 0,
                    'already_stopped': 0,
                    'failed': 0,
                    'results': []
                }

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞—Ç—á —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
            shutdown_result = self.ldconsole_manager.stop_batch(
                emulator_indexes=emulator_indexes,
                max_parallel=5,  # –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –±—ã—Å—Ç—Ä–µ–µ —á–µ–º –∑–∞–ø—É—Å–∫–∞—Ç—å
                force=False,  # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º graceful
                timeout=30
            )

            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—É–¥–∞—á–∏, –ø—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
            if shutdown_result['failed'] > 0:
                failed_indexes = [
                    result['index'] for result in shutdown_result['results']
                    if not result['success']
                ]

                if failed_indexes:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {len(failed_indexes)} —ç–º—É–ª—è—Ç–æ—Ä–æ–≤...")

                    force_shutdown = self.ldconsole_manager.stop_batch(
                        emulator_indexes=failed_indexes,
                        max_parallel=5,
                        force=True,  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
                        timeout=15
                    )

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    for force_result in force_shutdown['results']:
                        if force_result['success']:
                            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                            for i, result in enumerate(shutdown_result['results']):
                                if result['index'] == force_result['index']:
                                    shutdown_result['results'][i] = force_result
                                    shutdown_result['stopped_successfully'] += 1
                                    shutdown_result['failed'] -= 1
                                    break

            return shutdown_result

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∞–∑—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return {
                'success': False,
                'stopped_successfully': 0,
                'already_stopped': 0,
                'failed': len(emulator_indexes),
                'results': [],
                'error': str(e)
            }

    def _process_single_emulator(self, emulator: Dict, plan: BatchPlan) -> Dict:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ bot_worker
        """
        emulator_name = emulator['name']
        emulator_index = emulator['index']
        adb_port = emulator.get('adb_port')

        logger.info(f"üéÆ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–º—É–ª—è—Ç–æ—Ä {emulator_index} ({emulator_name[:30]})")

        start_time = time.time()

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–º—É–ª—è—Ç–æ—Ä –≤—Å—ë –µ—â—ë –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤
            if not self.ldconsole_manager.is_running(emulator_index):
                return {
                    'success': False,
                    'duration': 0,
                    'error': '–≠–º—É–ª—è—Ç–æ—Ä –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è'
                }

            # –ó–∞–ø—É—Å–∫–∞–µ–º bot_worker –∫–∞–∫ subprocess
            cmd = [
                sys.executable, "bot_worker.py",
                "--emulator", emulator_name,
                "--port", str(adb_port)
            ]

            logger.debug(f"–ö–æ–º–∞–Ω–¥–∞ bot_worker: {' '.join(cmd)}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            process = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=900,  # 15 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –Ω–∞ –æ–¥–∏–Ω —ç–º—É–ª—è—Ç–æ—Ä
                cwd=Path(__file__).parent
            )

            duration = time.time() - start_time
            success = process.returncode == 0

            if success:
                return {
                    'success': True,
                    'duration': duration,
                    'stdout': process.stdout,
                    'message': '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
                }
            else:
                return {
                    'success': False,
                    'duration': duration,
                    'error': f'bot_worker –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {process.returncode}',
                    'stderr': process.stderr[:500]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã–≤–æ–¥–∞
                }

        except subprocess.TimeoutExpired:
            duration = time.time() - start_time
            return {
                'success': False,
                'duration': duration,
                'error': '–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è bot_worker (15 –º–∏–Ω—É—Ç)'
            }

        except Exception as e:
            duration = time.time() - start_time
            return {
                'success': False,
                'duration': duration,
                'error': f'–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ bot_worker: {str(e)}'
            }

    # ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

    def _determine_optimal_profile(self, system_load) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        if system_load.load_level == 'critical':
            return 'dormant'
        elif system_load.load_level == 'high':
            return 'farming'
        elif system_load.load_level == 'medium':
            return 'developing'
        else:  # low
            return 'rushing'

    def _get_cpu_requirement(self, profile: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è CPU –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
        requirements = {
            'rushing': 4, 'developing': 3, 'farming': 2,
            'dormant': 1, 'emergency': 4
        }
        return requirements.get(profile, 2)

    def _get_memory_requirement(self, profile: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è (MB)"""
        requirements = {
            'rushing': 4096, 'developing': 3072, 'farming': 2048,
            'dormant': 1024, 'emergency': 4096
        }
        return requirements.get(profile, 2048)

    def _estimate_batch_duration(self, batch_size: int, profile: str) -> int:
        """–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞—Ç—á–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        # –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞ —ç–º—É–ª—è—Ç–æ—Ä –ø–æ –ø—Ä–æ—Ñ–∏–ª—è–º
        base_times = {
            'rushing': 600,  # 10 –º–∏–Ω—É—Ç - –∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–∫–∞—á–∫–∞
            'developing': 360,  # 6 –º–∏–Ω—É—Ç - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ
            'farming': 180,  # 3 –º–∏–Ω—É—Ç—ã - –±—ã—Å—Ç—Ä—ã–π —Ñ–∞—Ä–º
            'dormant': 120,  # 2 –º–∏–Ω—É—Ç—ã - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            'emergency': 300  # 5 –º–∏–Ω—É—Ç - —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        }

        base_time = base_times.get(profile, 300)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫—É (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ)
        startup_time = 120  # 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –∑–∞–ø—É—Å–∫ –≤—Å–µ–≥–æ –±–∞—Ç—á–∞
        shutdown_time = 60  # 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É

        # –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏)
        max_parallel = min(3, batch_size)
        processing_time = (batch_size / max_parallel) * base_time

        total_time = startup_time + processing_time + shutdown_time

        return int(total_time)

    def _update_session_stats(self, batch_results: BatchResults):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏"""
        self.session_stats['batches_executed'] += 1
        self.session_stats['emulators_processed'] += batch_results.emulators_processed
        self.session_stats['total_errors'] += len(batch_results.errors)
        self.session_stats['last_batch_time'] = datetime.now()

        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏: –±–∞—Ç—á–∏ {self.session_stats['batches_executed']}, "
                    f"—ç–º—É–ª—è—Ç–æ—Ä—ã {self.session_stats['emulators_processed']}, "
                    f"–æ—à–∏–±–∫–∏ {self.session_stats['total_errors']}")

    def _log_post_batch_system_state(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –±–∞—Ç—á–∞"""
        try:
            system_load = self.resource_monitor.get_system_load()
            self.resource_monitor.log_system_state()

            logger.info(f"üíª –°–∏—Å—Ç–µ–º–∞ –ø–æ—Å–ª–µ –±–∞—Ç—á–∞: CPU {system_load.cpu_percent:.1f}%, "
                        f"RAM {system_load.memory_percent:.1f}%, "
                        f"LDPlayer –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ {system_load.ldplayer_processes}")

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = self.resource_monitor.get_recommendations()
            for rec in recommendations[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                logger.info(f"üí° {rec}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã: {e}")

    # ===== –ú–ï–¢–û–î–´ –î–õ–Ø –ü–†–û–î–û–õ–ñ–ò–¢–ï–õ–¨–ù–û–ô –†–ê–ë–û–¢–´ =====

    def run_continuous_mode(self, profile_filter: Optional[str] = None,
                            batch_interval: int = 3600, max_batches: Optional[int] = None):
        """
        –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –±–∞—Ç—á–µ–π

        Args:
            profile_filter (str, optional): –§–∏–ª—å—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
            batch_interval (int): –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            max_batches (int, optional): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π
        """
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: –∏–Ω—Ç–µ—Ä–≤–∞–ª {batch_interval}s, —Ñ–∏–ª—å—Ç—Ä '{profile_filter}'")

        batches_executed = 0

        try:
            while not self.shutdown_requested:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –±–∞—Ç—á–µ–π
                if max_batches and batches_executed >= max_batches:
                    logger.info(f"‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –±–∞—Ç—á–µ–π: {max_batches}")
                    break

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
                needs_emergency_shutdown, reasons = self.resource_monitor.emergency_shutdown_check()
                if needs_emergency_shutdown:
                    logger.critical(f"üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: {', '.join(reasons)}")
                    self.emergency_shutdown = True
                    break

                logger.info(f"\nüéØ === –ë–ê–¢–ß #{batches_executed + 1} ===")

                # –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞—Ç—á
                batch_results = self.execute_smart_batch(profile_filter=profile_filter)

                batches_executed += 1

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if batch_results.success_rate < 50:
                    logger.warning(
                        f"‚ö†Ô∏è –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ ({batch_results.success_rate:.1f}%) - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª")
                    sleep_time = batch_interval * 1.5
                else:
                    sleep_time = batch_interval

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                if batches_executed < max_batches or not max_batches:
                    logger.info(f"üò¥ –ü–∞—É–∑–∞ {sleep_time / 60:.1f} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞—Ç—á–∞...")

                    # –ü—Ä–µ—Ä—ã–≤–∞–µ–º–∞—è –ø–∞—É–∑–∞ (–ø—Ä–æ–≤–µ—Ä—è–µ–º shutdown –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
                    elapsed = 0
                    while elapsed < sleep_time and not self.shutdown_requested:
                        time.sleep(min(30, sleep_time - elapsed))
                        elapsed += 30

                        # –ú–∏–Ω–∏-–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤–æ –≤—Ä–µ–º—è –ø–∞—É–∑—ã
                        if elapsed % 300 == 0:  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                            system_load = self.resource_monitor.get_system_load()
                            logger.debug(
                                f"üíª –°–∏—Å—Ç–µ–º–∞ –≤ –ø–∞—É–∑–µ: CPU {system_load.cpu_percent:.1f}%, RAM {system_load.memory_percent:.1f}%")

            logger.info(f"üèÅ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à—ë–Ω: –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {batches_executed} –±–∞—Ç—á–µ–π")

        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")

        finally:
            self._cleanup_after_session()

    def _cleanup_after_session(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Å–µ—Å—Å–∏–∏...")

        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã
            all_emulators = self.ldconsole_manager.get_all_emulators_status()
            running_indexes = [
                index for index, info in all_emulators.items()
                if info['is_running']
            ]

            if running_indexes:
                logger.info(f"üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {len(running_indexes)} –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤...")
                self.ldconsole_manager.stop_batch(running_indexes, force=True, timeout=30)

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
            self.resource_monitor.cleanup_old_records(days_to_keep=7)

            # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            session_duration = datetime.now() - self.session_stats['start_time']
            logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:")
            logger.info(f"   ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {session_duration}")
            logger.info(f"   üì¶ –ë–∞—Ç—á–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {self.session_stats['batches_executed']}")
            logger.info(f"   üéÆ –≠–º—É–ª—è—Ç–æ—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.session_stats['emulators_processed']}")
            logger.info(f"   ‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {self.session_stats['total_errors']}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ —Å–µ—Å—Å–∏–∏: {e}")

    def get_system_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
            system_load = self.resource_monitor.get_system_load()

            # –°—Ç–∞—Ç—É—Å —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
            all_emulators = self.ldconsole_manager.get_all_emulators_status()
            enabled_emulators = self.discovery.get_enabled_emulators()

            running_count = sum(1 for info in all_emulators.values() if info['is_running'])

            # Health check –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            ldconsole_health = self.ldconsole_manager.health_check()

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = self.resource_monitor.get_recommendations()

            status = {
                'timestamp': datetime.now().isoformat(),
                'system': {
                    'cpu_percent': system_load.cpu_percent,
                    'memory_percent': system_load.memory_percent,
                    'memory_available_gb': system_load.memory_available_gb,
                    'load_level': system_load.load_level,
                    'ldplayer_processes': system_load.ldplayer_processes
                },
                'emulators': {
                    'total': len(all_emulators),
                    'running': running_count,
                    'enabled': len(enabled_emulators),
                    'available_for_batch': len(enabled_emulators)
                },
                'components': {
                    'ldconsole_healthy': ldconsole_health['healthy'],
                    'resource_monitor_active': True,
                    'discovery_ready': True
                },
                'session_stats': self.session_stats.copy(),
                'recommendations': recommendations[:5]  # –ü–µ—Ä–≤—ã–µ 5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            }

            return status

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return {
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }


# ===== CLI –ö–û–ú–ê–ù–î–´ –° –†–ê–°–®–ò–†–ï–ù–ù–´–ú –§–£–ù–ö–¶–ò–û–ù–ê–õ–û–ú =====

@click.group()
@click.option('--debug', is_flag=True, help='–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º')
def cli(debug):
    """Beast Lord Smart Orchestrator v2 - –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞–º–∏"""
    if debug:
        logger.add(sys.stdout, level="DEBUG")
        logger.info("üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á—ë–Ω")


@cli.command()
@click.option('--profile', help='–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ—Ñ–∏–ª—é (rushing, developing, farming, dormant)')
@click.option('--max-emulators', type=int, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –≤ –±–∞—Ç—á–µ')
@click.option('--dry-run', is_flag=True, help='–†–µ–∂–∏–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
def smart_batch(profile, max_emulators, dry_run):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å —É–º–Ω—ã–π –±–∞—Ç—á —Å 5-—Ñ–∞–∑–Ω—ã–º workflow"""
    try:
        click.echo("üöÄ === SMART ORCHESTRATOR V2 ===")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        orchestrator = SmartOrchestrator()

        if dry_run:
            click.echo("üëÅÔ∏è –†–ï–ñ–ò–ú –ü–†–ï–î–ü–†–û–°–ú–û–¢–†–ê (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è)")

            # –¢–æ–ª—å–∫–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            discovery = EmulatorDiscovery()
            discovery.load_config()
            resource_monitor = ResourceMonitor()

            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            available_emulators = discovery.get_enabled_emulators(profile_filter=profile)
            system_load = resource_monitor.get_system_load()
            optimal_batch_size = resource_monitor.get_optimal_batch_size(profile or 'farming')

            if max_emulators:
                optimal_batch_size = min(optimal_batch_size, max_emulators)

            click.echo(f"\nüìä –ü–†–ï–î–ü–†–û–°–ú–û–¢–† –ë–ê–¢–ß–ê:")
            click.echo(
                f"  üñ•Ô∏è  –°–∏—Å—Ç–µ–º–∞: CPU {system_load.cpu_percent:.1f}%, RAM {system_load.memory_percent:.1f}%, –£—Ä–æ–≤–µ–Ω—å: {system_load.load_level}")
            click.echo(f"  üéÆ –î–æ—Å—Ç—É–ø–Ω–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {len(available_emulators)}")
            click.echo(f"  üì¶ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {optimal_batch_size}")
            click.echo(f"  ‚ö° –ü—Ä–æ—Ñ–∏–ª—å: {profile or 'auto-detect'}")

            safety_check = resource_monitor.is_safe_to_start_batch(optimal_batch_size, profile or 'farming')
            click.echo(f"  ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞: {'–î–∞' if safety_check.safe_to_start else '–ù–µ—Ç'}")

            if safety_check.warnings:
                click.echo("  ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
                for warning in safety_check.warnings:
                    click.echo(f"     ‚Ä¢ {warning}")

            return

        # –†–µ–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        results = orchestrator.execute_smart_batch(
            profile_filter=profile,
            max_emulators=max_emulators
        )

        # –û—Ç—á—ë—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        click.echo(f"\nüéâ === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–´–ü–û–õ–ù–ï–ù–ò–Ø ===")
        click.echo(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {results.total_duration / 60:.1f} –º–∏–Ω—É—Ç")
        click.echo(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {results.success_rate:.1f}%")
        click.echo(f"üéÆ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {results.emulators_processed}")

        if results.errors:
            click.echo("‚ùå –û—à–∏–±–∫–∏:")
            for error in results.errors[:5]:
                click.echo(f"   ‚Ä¢ {error}")

        if results.success_rate > 80:
            click.echo("‚úÖ –ë–∞—Ç—á –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        elif results.success_rate > 50:
            click.echo("‚ö†Ô∏è –ë–∞—Ç—á –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
        else:
            click.echo("‚ùå –ë–∞—Ç—á –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)

    except KeyboardInterrupt:
        click.echo("\n‚èπÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(130)
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}", err=True)
        sys.exit(1)


@cli.command()
@click.option('--profile', help='–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ—Ñ–∏–ª—é —ç–º—É–ª—è—Ç–æ—Ä–æ–≤')
@click.option('--interval', type=int, default=3600,
              help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3600 = 1 —á–∞—Å)')
@click.option('--max-batches', type=int, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)')
def continuous(profile, interval, max_batches):
    """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –±–∞—Ç—á–µ–π"""
    try:
        click.echo("üîÑ === –ù–ï–ü–†–ï–†–´–í–ù–´–ô –†–ï–ñ–ò–ú ===")
        click.echo(f"‚öôÔ∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval / 60:.1f} –º–∏–Ω—É—Ç")
        click.echo(f"üéØ –ü—Ä–æ—Ñ–∏–ª—å: {profile or 'auto-detect'}")
        if max_batches:
            click.echo(f"üì¶ –ú–∞–∫—Å–∏–º—É–º –±–∞—Ç—á–µ–π: {max_batches}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        orchestrator = SmartOrchestrator()

        # –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        orchestrator.run_continuous_mode(
            profile_filter=profile,
            batch_interval=interval,
            max_batches=max_batches
        )

        click.echo("‚úÖ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à—ë–Ω")

    except KeyboardInterrupt:
        click.echo("\n‚èπÔ∏è –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        sys.exit(130)
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}", err=True)
        sys.exit(1)


@cli.command()
@click.option('--detailed', is_flag=True, help='–ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å')
def status(detailed):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤"""
    try:
        orchestrator = SmartOrchestrator()
        status_data = orchestrator.get_system_status()

        if 'error' in status_data:
            click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {status_data['error']}", err=True)
            return

        click.echo("üìä === –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ ===")
        click.echo(f"üñ•Ô∏è  –°–∏—Å—Ç–µ–º–∞:")
        click.echo(f"   CPU: {status_data['system']['cpu_percent']:.1f}%")
        click.echo(
            f"   RAM: {status_data['system']['memory_percent']:.1f}% (—Å–≤–æ–±–æ–¥–Ω–æ: {status_data['system']['memory_available_gb']:.1f} GB)")
        click.echo(f"   –£—Ä–æ–≤–µ–Ω—å –Ω–∞–≥—Ä—É–∑–∫–∏: {status_data['system']['load_level']}")
        click.echo(f"   LDPlayer –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {status_data['system']['ldplayer_processes']}")

        click.echo(f"\nüéÆ –≠–º—É–ª—è—Ç–æ—Ä—ã:")
        click.echo(f"   –í—Å–µ–≥–æ: {status_data['emulators']['total']}")
        click.echo(f"   –ó–∞–ø—É—â–µ–Ω–æ: {status_data['emulators']['running']}")
        click.echo(f"   –í–∫–ª—é—á–µ–Ω–æ: {status_data['emulators']['enabled']}")
        click.echo(f"   –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –±–∞—Ç—á–∞: {status_data['emulators']['available_for_batch']}")

        click.echo(f"\n‚öôÔ∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        components = status_data['components']
        click.echo(f"   LDConsole: {'‚úÖ' if components['ldconsole_healthy'] else '‚ùå'}")
        click.echo(f"   ResourceMonitor: {'‚úÖ' if components['resource_monitor_active'] else '‚ùå'}")
        click.echo(f"   Discovery: {'‚úÖ' if components['discovery_ready'] else '‚ùå'}")

        session_stats = status_data['session_stats']
        if session_stats['batches_executed'] > 0:
            click.echo(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:")
            click.echo(f"   –ë–∞—Ç—á–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {session_stats['batches_executed']}")
            click.echo(f"   –≠–º—É–ª—è—Ç–æ—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {session_stats['emulators_processed']}")
            click.echo(f"   –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {session_stats['total_errors']}")

        recommendations = status_data['recommendations']
        if recommendations:
            click.echo(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for rec in recommendations[:3]:
                click.echo(f"   {rec}")

        if detailed:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
            discovery = EmulatorDiscovery()
            discovery.load_config()
            discovery.print_emulators_table(show_disabled=False)

    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}", err=True)
        sys.exit(1)


# –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ CLI –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
@cli.command()
@click.option('--force', is_flag=True, help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ')
def scan(force):
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —ç–º—É–ª—è—Ç–æ—Ä—ã LDPlayer"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –∏–∑ EmulatorDiscovery
        from orchestrator import cli as old_cli
        old_cli.commands['scan'].callback(force)
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", err=True)


@cli.command()
@click.option('--enabled-only', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–∫–ª—é—á—ë–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã')
@click.option('--profile', help='–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ—Ñ–∏–ª—é')
@click.option('--pattern', help='–§–∏–ª—å—Ç—Ä –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É –∏–º–µ–Ω–∏')
def list(enabled_only, profile, pattern):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
        from orchestrator import cli as old_cli
        old_cli.commands['list'].callback(enabled_only, profile, pattern)
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {e}", err=True)


if __name__ == "__main__":
    # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º CLI
    cli()